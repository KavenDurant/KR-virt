---
description: 
globs: 
alwaysApply: true
---
以下是为本项目定制的 AI 协作规则。AI 在后续开发中必须严格遵守。
核心协作原则
遵循最新标准：
所有框架（React）、UI库（Ant Design）、自定义Hooks及其他依赖的实现，均需参考其官方最新发布的文档。
积极采用最新的稳定版API和推荐的现代语法。
保证代码质量：
无错执行：每次编辑或新增代码后，必须保证项目可以正常编译、无运行时错误。
所有代码提交前必须通过 ESLint 和 TypeScript 的检查。
分步确认机制：
任务分解：在执行任何编码任务前，先列出清晰的任务分解步骤。
用户确认：等待用户确认步骤后，再开始执行。
测试驱动：所有核心功能的代码实现必须包含配套的单元测试或组件测试。
不确定时明确声明：
当需求模糊或信息不足时，必须回复：“我不知道，请提供更多细节”，并停止猜测。

1. 技术栈与核心依赖
核心框架: React 19
UI 组件库: Ant Design 5 (antd)，所有 UI 组件应优先使用 antd，并保持统一的视觉风格。
语言: TypeScript (版本: ~5.8.3)，必须遵循严格的类型检查 (strict: true)。
状态管理: Redux Toolkit (@reduxjs/toolkit)。复杂的全局状态使用 Redux；简单的组件内部状态可使用 React Hooks。
路由: React Router 7 (react-router-dom)。
构建工具: Vite。
测试框架: Vitest，配合 React Testing Library (@testing-library/react)。
2. 项目结构与代码组织
目录规范:
src/components: 可复用的 UI 组件。
src/pages: 页面级组件，每个页面一个文件夹。
src/hooks: 自定义 Hooks。
src/services: API 请求服务，与后端模块对应。
src/utils: 全局工具函数。
src/store: Redux Toolkit 相关代码。
src/types: 共享的 TypeScript 类型定义。
src/router: 路由配置。
路径别名: 统一使用 @/* 代替 src/*。
3. 编码规范
编码风格: 遵循项目根目录下的 eslint.config.js 和 Prettier 配置。
组件开发:
始终使用函数式组件 (Functional Components) 与 Hooks。
重要或复杂的组件和函数应使用 JSDoc 注释说明其用途、参数和返回值。
组件使用默认导出 (export default)，相关类型或辅助函数使用具名导出 (export { ... })。
TypeScript:
严禁 any：在 strict 模式下，禁止使用 any 类型，应定义精确的类型或接口。
清理代码：noUnusedLocals 和 noUnusedParameters 已启用，必须移除未使用的变量和参数。
共享的类型定义应放在 src/types 目录下。
API 调用:
所有后端 API 请求必须通过 src/utils/apiHelper.ts 中封装的 api 或 mockApi 对象进行。
返回统一的 StandardResponse<T> 格式，业务代码必须处理 success 字段。
开发模式下，优先使用 mockApi 进行数据模拟。
样式:
使用 Less 作为 CSS 预处理器。
推荐使用 CSS Modules (例如 Component.module.less) 以避免全局样式污染。
4. 测试
测试文件位置: 测试文件应与源文件相邻（例如 useTimeZone.test.ts 紧邻 useTimeZone.ts）。
测试覆盖范围:
必须测试: 关键的工具函数 (utils) 和自定义 Hooks (hooks)。
建议测试: 复杂的 UI 组件 (components) 的渲染和交互行为。
鼓励测试: 主要业务流程的集成测试。
5. 其他
代码注释: 对复杂的业务逻辑、算法或非直观的代码，应添加必要的中文注释。
代码可读性: 保持代码的简洁、清晰和可维护性。
语言: 所有代码、注释和文档均使用中文（简体）。